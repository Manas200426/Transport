const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

const generateLRPdf = (lrEntry) => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ size: 'A4', margin: 20 });
    const filePath = path.join(__dirname, `../pdfs/LR-${lrEntry.lrNumber}.pdf`);
    const writeStream = fs.createWriteStream(filePath);
    doc.pipe(writeStream);

    const primaryColor = '#003366';
    const secondaryColor = '#555555';
    const sectionSpacing = 10;
    const rowSpacing = 6;

    // **Title**
    doc
      .font('Helvetica-Bold')
      .fontSize(16)
      .fillColor(primaryColor)
      .text('LR Entry Details', { align: 'center' })
      .moveDown(1);

    // **Helper Function to Draw a Row**
    const drawRow = (label1, value1, label2, value2) => {
      const y = doc.y;
      doc.fillColor(secondaryColor).fontSize(10);

      doc.font('Helvetica-Bold').text(label1, 50, y, { continued: true }).font('Helvetica').text(`: ${value1}`, { width: 200 });
      doc.font('Helvetica-Bold').text(label2, 320, y, { continued: true }).font('Helvetica').text(`: ${value2}`);
      doc.moveDown(rowSpacing / 2);
    };

    // **Section: General Information**
    doc.font('Helvetica-Bold').fontSize(12).fillColor(primaryColor).text('General Information', 50).moveDown(0.5);
    drawRow('LR Number', lrEntry.lrNumber, 'LR Date', lrEntry.lrDate);
    drawRow('Consignor', lrEntry.consignorName, 'Consignee', lrEntry.consigneeName);
    drawRow('From', lrEntry.from, 'To', lrEntry.to);
    doc.moveDown(sectionSpacing);

    // **Section: E-Way Bill Details**
    doc.font('Helvetica-Bold').fontSize(12).text('E-Way Bill Details', 50).moveDown(0.5);
    drawRow('E-Way Bill No', lrEntry.ewayBillNo, 'E-Way Bill Date', lrEntry.ewayBillDate);
    drawRow('Expiry Date', lrEntry.expiryDate, '', '');
    doc.moveDown(sectionSpacing);

    // **Section: Invoice Details**
    doc.font('Helvetica-Bold').fontSize(12).text('Invoice Details', 50).moveDown(0.5);
    drawRow('Invoice No', lrEntry.invoiceNo, 'Invoice Date', lrEntry.invoiceDate);
    drawRow('Invoice Amount', `₹${lrEntry.invoiceAmount}`, 'To Pay', `₹${lrEntry.toPay}`);
    drawRow('Transport Type', lrEntry.transportType, 'Vehicle No', lrEntry.vehicleNo);
    doc.moveDown(sectionSpacing);

    // **Table: Product Details**
    doc.font('Helvetica-Bold').fontSize(12).text('Product Details', 50).moveDown(0.5);

    const colX = [50, 120, 260, 320, 400];
    const colWidths = [70, 130, 60, 60, 80];
    const rowHeight = 14;
    let y = doc.y + 5;

    doc.font('Helvetica-Bold').fontSize(10).fillColor(primaryColor);
    doc.rect(48, y - 2, 450, rowHeight).fill('#f2f2f2');
    doc.fillColor('black');

    doc.text('HSN Code', colX[0], y, { width: colWidths[0] });
    doc.text('Description', colX[1], y, { width: colWidths[1] });
    doc.text('Unit', colX[2], y, { width: colWidths[2] });
    doc.text('Quantity', colX[3], y, { width: colWidths[3] });
    doc.text('Taxable Amount', colX[4], y, { width: colWidths[4] });
    doc.moveDown(1);

    doc.font('Helvetica').fontSize(10);
    lrEntry.table.forEach((item, index) => {
      y = doc.y;
      doc.text(item.hsnCode, colX[0], y, { width: colWidths[0] });
      doc.text(item.productDescription, colX[1], y, { width: colWidths[1] });
      doc.text(item.unit, colX[2], y, { width: colWidths[2] });
      doc.text(item.quantity, colX[3], y, { width: colWidths[3] });
      doc.text(item.taxableAmount, colX[4], y, { width: colWidths[4] });
      doc.moveDown(0.5);
    });
    doc.moveDown(sectionSpacing);

    // **Total Amount**
    doc.font('Helvetica-Bold').fontSize(12).fillColor(primaryColor).text(`Total Amount: ₹${lrEntry.total}`, { align: 'right' });

    // **Footer**
    doc.moveDown(2);
    doc.font('Helvetica').fontSize(8).fillColor('gray').text('Generated by LR Booking System', { align: 'center' });

    doc.end();
    writeStream.on('finish', () => resolve(filePath));
    writeStream.on('error', (err) => reject(err));
  });
};

module.exports = generateLRPdf;
